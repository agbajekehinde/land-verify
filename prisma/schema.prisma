generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                   @id @default(dbgenerated("(floor(((random() * (9000)::double precision) + (1000)::double precision)))::integer"))
  firstName     String
  lastName      String
  email         String                @unique
  createdAt     DateTime              @default(now())
  password      String
  role          String                @default("user")
  emailVerified Boolean               @default(false)
  updatedAt     DateTime?
  verifiedAt    DateTime?
  verifications VerificationRequest[]
}

model Partner {
  id                   Int                   @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String                @unique
  password             String
  phone                String?
  createdAt            DateTime              @default(now())
  title                String
  state                String?
  verificationReports  VerificationReport[]
  verificationRequests VerificationRequest[]
}

model VerificationRequest {
  id            String              @id @default(uuid())
  userId        Int
  address       String
  files         String[]
  status        Status              @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  latitude      Float?
  longitude     Float?
  state         String
  landsize      String              @default("Unknown")
  partnerId     Int?
  paymentAmount Float               @default(0)
  paymentStatus String              @default("pending")
  documentIntegrity Json?
  paymentType   String              @default("regular")
  lga           String              @default("Unknown")
  report        VerificationReport?
  partner       Partner?            @relation(fields: [partnerId], references: [id])
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationReport {
  id                    String              @id @default(uuid())
  verificationRequestId String              @unique
  partnerId             Int
  reportFiles           String[]
  findings              Json?
  status                ReportStatus        @default(DRAFT)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  partner               Partner             @relation(fields: [partnerId], references: [id])
  verificationRequest   VerificationRequest @relation(fields: [verificationRequestId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum UserRole {
  USER
  ADMIN
  PARTNER
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  APPROVED
  REJECTED
}
